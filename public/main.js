// Generated by CoffeeScript 1.4.0

(function($) {
  var defaults;
  $.event.fix = (function(originalFix) {
    return function(event) {
      event = originalFix.apply(this, arguments);
      if (event.type.indexOf('drag') === 0 || event.type.indexOf('drop') === 0) {
        event.dataTransfer = event.originalEvent.dataTransfer;
      }
      return event;
    };
  })($.event.fix);
  defaults = {
    callback: $.noop,
    matchType: /image.*/
  };
  return $.fn.dropImageReader = function(options) {
    var stopFn;
    if (typeof options === "function") {
      options = {
        callback: options
      };
    }
    options = $.extend({}, defaults, options);
    stopFn = function(event) {
      event.stopPropagation();
      return event.preventDefault();
    };
    return this.each(function() {
      var $this, element;
      element = this;
      $this = $(this);
      $this.bind('dragenter dragover dragleave', stopFn);
      return $this.bind('drop', function(event) {
        stopFn(event);
        return Array.prototype.forEach.call(event.dataTransfer.files, function(file) {
          var reader;
          if (!file.type.match(options.matchType)) {
            return;
          }
          reader = new FileReader();
          reader.onload = function(evt) {
            return options.callback.call(element, {
              dataURL: evt.target.result,
              event: evt,
              file: file,
              name: file.name
            });
          };
          return reader.readAsDataURL(file);
        });
      });
    });
  };
})(jQuery);

Object.extend(Storage, {
  pushData: function(name, value) {
    var list;
    list = this.list(name);
    if (!list.include(value)) {
      list.push(value);
    }
    this.store(name, list);
    return list;
  },
  removeData: function(name, value) {
    var list;
    list = this.list(name);
    list.remove(value);
    this.store(name, list);
    return list;
  },
  store: function(key, value) {
    localStorage[key] = JSON.stringify(value);
    return value;
  },
  list: function(name) {
    var existing;
    if (existing = localStorage[name]) {
      return JSON.parse(existing);
    } else {
      return [];
    }
  },
  hash: function(name) {
    var existing;
    if (existing = localStorage[name]) {
      return JSON.parse(existing);
    } else {
      return {};
    }
  },
  filetree: function() {
    return this.hash("filetree");
  },
  mergeTree: function(tree) {
    var key, mergedTree;
    key = "filetree";
    mergedTree = Object.extend(this.hash(key), tree);
    return this.store(key, mergedTree);
  }
});

window.CAS = {
  storeJSON: function(data, type) {
    var jsonData;
    if (type == null) {
      type = "application/json";
    }
    jsonData = JSON.stringify(data);
    $.post('/upload', {
      data: jsonData,
      type: type
    });
    return CryptoJS.SHA1(jsonData).toString();
  },
  storeBase64: function(data, type) {
    var raw;
    if (type == null) {
      type = "image/png";
    }
    $.post('/upload', {
      data_base64: data,
      type: type
    });
    raw = CryptoJS.enc.Base64.parse(data);
    return CryptoJS.SHA1(raw).toString();
  },
  getJSON: function(sha, callback) {
    var url;
    url = Resource.url(sha, true);
    return $.getJSON(url, callback);
  }
};

window.Resource = {
  url: function(sha, crossOrigin) {
    var n, url;
    if (crossOrigin == null) {
      crossOrigin = false;
    }
    n = Math.floor(parseInt(sha.substring(0, 1), 16) / 4);
    url = "http://a" + n + ".pixiecdn.com/" + sha;
    if (crossOrigin) {
      return "" + url + "?" + location.host;
    } else {
      return url;
    }
  }
};
