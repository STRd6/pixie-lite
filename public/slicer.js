// Generated by CoffeeScript 1.6.3
var Slicer,
  __slice = [].slice;

Slicer = function(I) {
  var canvas, canvasElement, context, drawGuides, drawSelection, height, image, offsetX, offsetY, overlayCanvas, overlayContext, selection, selectionData, selections, snap, snapSelection, update, width;
  if (I == null) {
    I = {};
  }
  width = I.width, height = I.height, image = I.image;
  canvas = $("<canvas width=" + width + " height=" + height + ">").css({
    display: "block"
  });
  canvasElement = canvas.get(0);
  canvas.appendTo("body");
  overlayCanvas = $("<canvas width=" + width + " height=" + height + ">").css({
    position: "absolute",
    top: 0,
    bottom: 0,
    display: "block"
  });
  overlayCanvas.appendTo("body");
  context = canvasElement.getContext("2d");
  overlayContext = overlayCanvas.get(0).getContext("2d");
  offsetX = 0;
  offsetY = 0;
  selection = null;
  snap = 16;
  selections = Storage.list("selections");
  drawGuides = function(context) {
    context.fillStyle = 'rgba(0, 0, 0, 0.25)';
    (width / snap).times(function(n) {
      return context.fillRect(n * snap, 0, 1, height);
    });
    return (height / snap).times(function(n) {
      return context.fillRect(0, n * snap, width, 1);
    });
  };
  drawSelection = function(context) {
    if (selection) {
      context.fillStyle = 'rgba(255, 0, 0, 0.25)';
      context.fillRect.apply(context, selection);
    }
    return selections.each(function(selection) {
      context.fillStyle = 'rgba(0, 255, 0, 0.25)';
      return context.fillRect.apply(context, selection);
    });
  };
  update = function() {
    context.clearRect(0, 0, width, height);
    context.drawImage(image, offsetX, offsetY);
    overlayContext.clearRect(0, 0, width, height);
    drawGuides(overlayContext);
    return drawSelection(overlayContext);
  };
  update();
  snapSelection = function(points) {
    points[3] += snap;
    points[2] += snap;
    return points.invoke("snap", snap);
  };
  selectionData = function(x, y, width, height) {
    var data, tempCanvas;
    tempCanvas = $("<canvas width=" + width + " height=" + height + "></canvas>").get(0);
    context = tempCanvas.getContext('2d');
    context.drawImage(canvasElement, x, y, width, height, 0, 0, width, height);
    data = tempCanvas.toDataURL("image/png");
    return data.substr(data.indexOf(',') + 1);
  };
  return {
    selection: function(newSelection) {
      if (arguments.length >= 1) {
        selection = snapSelection(newSelection);
        return update();
      } else {
        return selection;
      }
    },
    clearSelections: function() {
      return selections = [];
    },
    remember: function() {
      if (selection) {
        selections.push(selection);
        Storage.pushData("selections", selection);
        return update();
      }
    },
    extract: function(bounds, delay) {
      var data, raw, sha;
      if (delay == null) {
        delay = 0;
      }
      bounds || (bounds = selection);
      data = selectionData.apply(null, bounds);
      setTimeout(function() {
        return $.post('/upload', {
          data_base64: data,
          type: "image/png"
        });
      }, delay);
      raw = CryptoJS.enc.Base64.parse(data);
      sha = CryptoJS.SHA1(raw).toString();
      Storage.pushData("extractions", sha);
      return sha;
    },
    extractAll: function() {
      var extract;
      extract = this.extract;
      return selections.map(function(selection, i) {
        return extract(selection, i * 500);
      });
    },
    extractAllByGrid: function() {
      var extract;
      extract = this.extract;
      return (height / snap).times(function(j) {
        return (width / snap).times(function(i) {
          var x, y;
          x = i * snap;
          y = j * snap;
          return extract([x, y, x + snap, y + snap]);
        });
      });
    },
    "eval": function(code) {
      return eval(code);
    }
  };
};

window.Slicer = Slicer;

$(function() {
  var pos, slicer, startPosition;
  slicer = null;
  window.extractTiles = function(extractions) {
    return extractions.each(function(extraction) {
      return loadExtraction(extraction, function(slicer) {
        var shas;
        shas = slicer.extractAll();
        return shas.each(function(sha) {
          return Storage.pushData("tiles", sha);
        });
      });
    });
  };
  window.loadExtraction = function(sha, cb) {
    var img, url;
    $("body").empty();
    url = Resource.url(sha, true);
    return img = $("<img>", {
      crossOrigin: "",
      load: function() {
        window.slicer = slicer = Slicer({
          width: this.width,
          height: this.height,
          image: this
        });
        return typeof cb === "function" ? cb(slicer) : void 0;
      },
      src: url
    });
  };
  loadExtraction("8f0d890af45f0dd5abf51db7aa1ee6d172cd843b");
  startPosition = null;
  pos = function(event) {
    var offset;
    offset = $(event.currentTarget).offset();
    return [event.pageX - offset.left, event.pageY - offset.top];
  };
  $("body").dropImageReader(function(_arg) {
    var data, dataURL, sha;
    dataURL = _arg.dataURL;
    data = Util.dataFromDataURL(dataURL);
    return sha = CAS.storeBase64(data, {
      callback: function() {
        return loadExtraction(sha);
      }
    });
  });
  $(document).on({
    mousedown: function(e) {
      return startPosition = pos(e);
    },
    mousemove: function(e) {
      var extent, x, y, _ref;
      if (startPosition) {
        _ref = pos(e), x = _ref[0], y = _ref[1];
        extent = [x - startPosition[0], y - startPosition[1]];
        return slicer.selection(__slice.call(startPosition).concat(__slice.call(extent)));
      }
    },
    mouseup: function() {
      return startPosition = null;
    }
  }, "canvas");
  $(document).bind("keydown", "x", function() {
    return slicer.extract();
  });
  $(document).bind("keydown", "r", function() {
    return slicer.remember();
  });
  return $(document).bind("keydown", "a", function() {
    var shas;
    shas = slicer.extractAll();
    return shas.each(function(sha) {
      return Storage.pushData("tiles", sha);
    });
  });
});
